### Step 1: Create GKE Cluster with Autoscaling
# Run this command in Google Cloud Shell

```
gcloud container clusters create highway63-cluster \
    --num-nodes=1 \
    --enable-autoscaling --min-nodes=1 --max-nodes=3 \
    --enable-ip-alias \
    --release-channel=regular \
    --machine-type=e2-medium \
    --enable-stackdriver-kubernetes
```

### Step 2: Create Namespaces for Different Environments
```
kubectl create namespace dev
kubectl create namespace test
kubectl create namespace prod
```

### Step 3: Deploy the Application
#### Deployment YAML (deployment.yaml)
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  namespace: prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: gcr.io/YOUR_PROJECT_ID/my-app:latest
        ports:
        - containerPort: 80
```

### Step 4: Expose the Application
#### Service YAML (service.yaml)
```
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
  namespace: prod
spec:
  type: LoadBalancer
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
```
```
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
```

### Step 5: Install Jenkins on the Cluster
```
kubectl create namespace jenkins
helm repo add jenkins https://charts.jenkins.io
helm repo update
helm install jenkins jenkins/jenkins --namespace jenkins
```

### Step 6: Push Application Code to Repository
Push your code to GitHub, GitLab, or Bitbucket.

### Step 7: Build and Push Docker Image
#### Build and Push using Cloud Builder
```
gcloud builds submit --tag gcr.io/YOUR_PROJECT_ID/my-app:latest .
```

### Step 8: Set Up Cloud Monitoring
```
gcloud services enable monitoring.googleapis.com
kubectl apply -f monitoring-config.yaml
```
